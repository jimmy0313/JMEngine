// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_rpc_2eproto__INCLUDED
#define PROTOBUF_rpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_2eproto();
void protobuf_AssignDesc_rpc_2eproto();
void protobuf_ShutdownFile_rpc_2eproto();

class jme_rpc;

// ===================================================================

class jme_rpc : public ::google::protobuf::Message {
 public:
  jme_rpc();
  virtual ~jme_rpc();

  jme_rpc(const jme_rpc& from);

  inline jme_rpc& operator=(const jme_rpc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const jme_rpc& default_instance();

  void Swap(jme_rpc* other);

  // implements Message ----------------------------------------------

  jme_rpc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const jme_rpc& from);
  void MergeFrom(const jme_rpc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rpc_id = 1;
  inline bool has_rpc_id() const;
  inline void clear_rpc_id();
  static const int kRpcIdFieldNumber = 1;
  inline ::google::protobuf::int32 rpc_id() const;
  inline void set_rpc_id(::google::protobuf::int32 value);

  // required string method = 2;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 2;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  inline void set_allocated_method(::std::string* method);

  // required bytes params = 3;
  inline bool has_params() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 3;
  inline const ::std::string& params() const;
  inline void set_params(const ::std::string& value);
  inline void set_params(const char* value);
  inline void set_params(const void* value, size_t size);
  inline ::std::string* mutable_params();
  inline ::std::string* release_params();
  inline void set_allocated_params(::std::string* params);

  // @@protoc_insertion_point(class_scope:jme_rpc)
 private:
  inline void set_has_rpc_id();
  inline void clear_has_rpc_id();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_params();
  inline void clear_has_params();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* method_;
  ::std::string* params_;
  ::google::protobuf::int32 rpc_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static jme_rpc* default_instance_;
};
// ===================================================================


// ===================================================================

// jme_rpc

// required int32 rpc_id = 1;
inline bool jme_rpc::has_rpc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void jme_rpc::set_has_rpc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void jme_rpc::clear_has_rpc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void jme_rpc::clear_rpc_id() {
  rpc_id_ = 0;
  clear_has_rpc_id();
}
inline ::google::protobuf::int32 jme_rpc::rpc_id() const {
  return rpc_id_;
}
inline void jme_rpc::set_rpc_id(::google::protobuf::int32 value) {
  set_has_rpc_id();
  rpc_id_ = value;
}

// required string method = 2;
inline bool jme_rpc::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void jme_rpc::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void jme_rpc::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void jme_rpc::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& jme_rpc::method() const {
  return *method_;
}
inline void jme_rpc::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void jme_rpc::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void jme_rpc::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* jme_rpc::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* jme_rpc::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void jme_rpc::set_allocated_method(::std::string* method) {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (method) {
    set_has_method();
    method_ = method;
  } else {
    clear_has_method();
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes params = 3;
inline bool jme_rpc::has_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void jme_rpc::set_has_params() {
  _has_bits_[0] |= 0x00000004u;
}
inline void jme_rpc::clear_has_params() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void jme_rpc::clear_params() {
  if (params_ != &::google::protobuf::internal::kEmptyString) {
    params_->clear();
  }
  clear_has_params();
}
inline const ::std::string& jme_rpc::params() const {
  return *params_;
}
inline void jme_rpc::set_params(const ::std::string& value) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::kEmptyString) {
    params_ = new ::std::string;
  }
  params_->assign(value);
}
inline void jme_rpc::set_params(const char* value) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::kEmptyString) {
    params_ = new ::std::string;
  }
  params_->assign(value);
}
inline void jme_rpc::set_params(const void* value, size_t size) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::kEmptyString) {
    params_ = new ::std::string;
  }
  params_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* jme_rpc::mutable_params() {
  set_has_params();
  if (params_ == &::google::protobuf::internal::kEmptyString) {
    params_ = new ::std::string;
  }
  return params_;
}
inline ::std::string* jme_rpc::release_params() {
  clear_has_params();
  if (params_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = params_;
    params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void jme_rpc::set_allocated_params(::std::string* params) {
  if (params_ != &::google::protobuf::internal::kEmptyString) {
    delete params_;
  }
  if (params) {
    set_has_params();
    params_ = params;
  } else {
    clear_has_params();
    params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_2eproto__INCLUDED
